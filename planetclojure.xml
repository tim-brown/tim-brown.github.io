<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tim Brown’s Blog</title>
  <link href="https://tim-brown.github.io/atom.xml" rel="self"/>
  <link href="https://tim-brown.github.io/"/>
  <updated>2023-06-11T17:50:10+00:00</updated>
  <id>https://tim-brown.github.io/</id>
  <author>
    <name>Quick Blogger</name>
  </author>
  <entry>
    <id>https://tim-brown.github.io/2023-06-06-getting-started-with-quickblog.html</id>
    <link href="https://tim-brown.github.io/2023-06-06-getting-started-with-quickblog.html"/>
    <title>My first blog entry for a while</title>
    <updated>2023-06-06T23:59:59+00:00</updated>
    <content type="html">
      <![CDATA[<p>So... I’ve decided to get back on the blogging horse, but I’ve been dragging my feet a bit figuring out what blogging platform to use.</p><p>I’ve had previous experience with gitlab pages... and a long time ago <a href='https://docs.racket-lang.org/frog/index.html'>racket frog</a>. Which is awesome, but as far as I can tell, no longer supported by the author. And my general trajectory is Clojure-wards.</p><p>I need a blogging tool, implemented in Clojure, that will work with gitlab pages.<br /> A quick google search of “babashka blog framework” threw up <a href='https://github.com/borkdude/quickblog'>quickblog</a>.</p><p>Deep breath... what’s that going to look like?</p><!-- end-of-preview --> </p><p>The readme looks really simple (disclosure, I already have babashka and Clojure installed on my local machine, and I’m pretty happy with the idea of configuring my environment with a <code>bb.edn</code> (or <code>deps.clj</code>)). So:</p><ul><li>Created an empty github repo to hold the blog</li><li>I basically copied the <code>bb.edn</code></li><li>Customised it with an updated github sha (<code>792f952be8fe0f3326b293dde3251f6a09deaf0c</code> today, who knows what it will be for you)</li><li>And pretty well, this thing works out of the box!</li></ul><p>Further customisation of <code>bb.edn</code> was to “personalise” the blog:</p><ul><li>Updated the <code>:blog-title</code> and <code>:blog-description</code> keys</li></ul><p>And after that:<pre><code class="lang-bash">bb quickblog new --file &quot;2023-06-06-test.md&quot; --title &quot;My first blog entry for a while&quot;
</code></pre></p><p>created a new file in (an automatically created) <code>posts/</code>.</p><p>I edit the new file in one terminal; and in another I run:<pre><code class="lang-bash">bb quickblog watch
</code></pre></p><p>And now I have the blog post... with live updates; and a few todos:</p><ul><li>Write the content!</li><li>Discuss (I need to set up Disqus)</li><li>Publishing to pages</li><li>PR to allow <code>:footnote?</code> to be passed to <code>md/md-to-html-string</code>: I tried to use a footnote, but instead it gave me superscript. That’s a choice that should be given to the author of the document.</li><li>Styles and favicons</li></ul><h2>Write the content</h2><p>On it &mdash; that’s what this post is!</p><h2>Setting up Disqus</h2><ul><li>set up (or revive) the Disqus account</li><li>set up a “site”</li><li>follow the install instructions for “Universal Code” for the site</li><li>add the code Disqus provides to <code>templates/post.html</code> (wherever you think you need it)</li><li>I had to change the code to set the <code>this.page.url</code> and <code>this.page.identifier</code>. To do this, you need to activate the <code>disqus&#95;config</code> section of the universal code and replace it with:<pre><code class="lang-javascript">   var disqus&#95;config = function &#40;&#41; {
     this.page.url = sharingUrl; 
     this.page.identifier = &quot;{{file}}&quot;;
   };
   </code></pre>  this only goes so far, though because I couldn’t find a way to get the page’s URL into the page template using the <i>Selmer</i> templating (worth further investigation). I could get it in <code>templates/base.html</code>; so around line 29 there...<pre><code class="lang-html">   {% if sharing.url %}
       &lt;meta name=&quot;twitter:url&quot; content=&quot;{{sharing.url}}&quot;&gt;
       &lt;meta property=&quot;og:url&quot; content=&quot;{{sharing.url}}&quot;&gt;
       &lt;script&gt;const sharingUrl = &quot;{{sharing.url}}&quot;&lt;/script&gt;
   {% endif %}
  </code></pre></li></ul><p>I have to figure out what the “Discus this post” link is.</p><h2>Publishing on pages</h2><p>I am now at: <code>Tue  6 Jun 20:14:23 BST 2023</code> &mdash; 2 hours in (and that includes blogging!)</p><p>I don’t have this pushed up to github pages yet... that’s one for tomorrow. But, wow... so far this has been properly smooth! I’m impressed.</p><h2>First... check it in!</h2><p>So far, I’ve generated the following files:</p><pre><code>.
./posts
./posts/2023-06-06-test.md
./templates
./templates/post.html
./templates/post-links.html
./templates/tags.html
./templates/index.html
./templates/style.css
./templates/base.html
./.work
./.work/2023-06-06-test.md.pre-template.html
./.work/cache.edn
./.gitignore
./LICENSE
./README.md
./public
./public/planetclojure.xml
./public/atom.xml
./public/tags
./public/tags/clojure.html
./public/tags/clojure-blogging.html
./public/tags/blogging.html
./public/tags/index.html
./public/archive.html
./public/2023-06-06-test.html
./public/index.html
./public/style.css
./bb.edn
</code></pre><p>I need to <code>.gitignore</code>:</p><ul><li><code>.work</code></li><li><code>public</code> (dunno if I have to un-gitignore this later... we’ll see)</li></ul><p>The rest needs to be source controlled.</p><p>Great... committing my blog for the evening!<pre><code class="lang-bash">git add .gitignore README.md bb.edn posts/ templates
</code></pre></p>]]>
    </content>
  </entry>
</feed>
